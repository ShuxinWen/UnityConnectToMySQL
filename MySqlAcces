using MySql.Data.MySqlClient;
using System;
using System.Data;
using UnityEngine;

public class MySqlAcces
{
    //连接类对象
    private static MySqlConnection mySqlConnection;
    //IP地址
    private static string host;
    //端口号
    private static string port;
    //用户名
    private static string userName;
    //密码
    private static string password;
    //数据库名称
    private static string databaseName;

    /// <summary>
    /// 构造方法
    /// </summary>
    /// <param name="_host">ip地址</param>
    /// <param name="_userName">用户名</param>
    /// <param name="_password">密码</param>
    /// <param name="_databaseName">数据库名称</param>
    public MySqlAcces(string _host, string _port, string _userName, string _password, string _databaseName)
    {
        host = _host;
        port = _port;
        userName = _userName;
        password = _password;
        databaseName = _databaseName;
        OpenSql();
    }

    /// <summary>
    /// 打开数据库
    /// </summary>
    public void OpenSql()
    {
        try
        {
            string mySqlString = string.Format("Database={0};Data Source={1};User Id={2};Password={3};port={4};charset=utf8"
                , databaseName, host, userName, password, port);
            mySqlConnection = new MySqlConnection(mySqlString);
            mySqlConnection.Open();

        }
        catch (Exception e)
        {
            Debug.Log("服务器连接失败，请重新检查MySql服务是否打开。" + e.Message.ToString());
        }

    }

    /// <summary>
    /// 关闭数据库
    /// </summary>
    public void CloseSql()
    {
        if (mySqlConnection != null)
        {
            mySqlConnection.Close();
            mySqlConnection.Dispose();
            mySqlConnection = null;
        }
    }

    /// <summary>
    /// 查询数据
    /// </summary>
    /// <param name="tableName">表名</param>
    /// <param name="items">要查询的列</param>
    /// <param name="whereColumnName">查询的条件列</param>
    /// <param name="operation">条件操作符</param>
    /// <param name="value">条件的值</param>
    /// <returns></returns>
    public DataSet Select(string tableName, string[] items, string[] whereColumnName,
        string[] operation, string[] value)
    {

        if (whereColumnName.Length != operation.Length || operation.Length != value.Length)
        {
            Debug.Log("输入不正确：" + "要查询的条件、条件操作符、条件值 的数量不一致！");
        }
        string query = "Select " + items[0];
        for (int i = 1; i < items.Length; i++)
        {
            query += "," + items[i];
        }

        query += " FROM " + tableName + " WHERE " + whereColumnName[0] + " " + operation[0] + " '" + value[0] + "'";
        for (int i = 1; i < whereColumnName.Length; i++)
        {
            query += " and " + whereColumnName[i] + " " + operation[i] + " '" + value[i] + "'";
        }
        Debug.Log(query);
        return QuerySet(query);

    }
    /// <summary>  
    /// 创建表  
    /// </summary>  
    /// <param name="name">表名</param>  
    /// <param name="colName">属性列</param>  
    /// <param name="colType">属性类型</param>  
    /// <returns></returns>  
    public DataSet CreateTable(string name, string[] colName, string[] colType)
    {
        if (colName.Length != colType.Length)
        {
            Debug.Log("输入不正确：" + "columns.Length != colType.Length");
        }

        string query = "CREATE TABLE  " + name + "(" + colName[0] + " " + colType[0];
        for (int i = 1; i < colName.Length; i++)
        {
            query += "," + colName[i] + " " + colType[i];
        }
        query += ")";
        Debug.Log(query);
        return QuerySet(query);
    }
    /// <summary>  
    /// 创建具有id自增的表  
    /// </summary>  
    /// <param name="name">表名</param>  
    /// <param name="colName">属性列</param>  
    /// <param name="colType">属性列类型</param>  
    /// <returns></returns>  
    public DataSet CreateTableAutoID(string name, string[] colName, string[] colType)
    {
        if (colName.Length != colType.Length)
        {
            Debug.Log("输入不正确：" + "columns.Length != colType.Length");
        }
        string query = "CREATE TABLE  " + name + " (" + colName[0] + " " + colType[0] + " NOT NULL AUTO_INCREMENT";
        for (int i = 1; i < colName.Length; ++i)
        {
            query += ", " + colName[i] + " " + colType[i];
        }
        query += ", PRIMARY KEY (" + colName[0] + ")" + ")";
        Debug.Log(query);
        return QuerySet(query);        
    }
    /// <summary>
    /// 插入一条不自增数据，包括所有
    /// </summary>
    /// <param name="tableName">表名</param>
    /// <param name="values">插入数据</param>
    /// <returns></returns>
    public DataSet InsertInto(string tableName, string[] values)
    {
        string query = "insert into " + tableName + " values (" + "'" + values[0] + "'";
        for (int i = 1; i < values.Length; i++)
        {
            query += ", " + "'" + values[i] + "'";
        }
        query += ")";
        Debug.Log(query);
        return QuerySet(query);
    }
    /// <summary>
    /// 插入部分数据
    /// </summary>
    /// <param name="tableName">表名</param>
    /// <param name="col">要插入的列</param>
    /// <param name="values">插入的对应列的数据</param>
    /// <returns></returns>
    public DataSet InsertInto(string tableName, string[] col, string[] values)
    {        
        if (col.Length != values.Length)
        {
            Debug.Log("数据插入：columns.Length != values.Length");
        }
        string query = "insert into " + tableName + " (" + col[0];
        for (int i = 1; i < col.Length; i++)
        {
            query += ", " + col[i];
        }
        query += ") values (" + "'" + values[0] + "'";
        for (int i = 1; i < values.Length; i++)
        {
            query += ", " + "'" + values[i] + "'";
        }
        query += ")";
        Debug.Log(query);
        return QuerySet(query);
    }
    /// <summary>
    /// 更新数据方法
    /// </summary>
    /// <param name="tableName">表名</param>
    /// <param name="cols">更新的列</param>
    /// <param name="colsvalues">更新的数据</param>
    /// <param name="selectkey">要更新的列（旧）</param>
    /// <param name="selectvalue">要更新的数据（旧），先找出数据在更新</param>
    /// <returns></returns>
    public DataSet UpdateInto(string tableName, string[] cols, string[] colsvalues, string selectkey, string selectvalue)
    {
        string update = "update " + tableName + " set " + cols[0] + " = " + colsvalues[0];
        for (int i = 1; i < colsvalues.Length; i++)
        {
            update += ", " + cols[i] + " =" + colsvalues[i];
        }
        update += " where " + selectkey + " = " + selectvalue + " ";
        Debug.Log(update);
        return QuerySet(update);
    }
    /// <summary>
    /// 删除数据方法
    /// </summary>
    /// <param name="tableName">表名</param>
    /// <param name="cols">数据列</param>
    /// <param name="colsvalues">数据</param>
    /// <returns></returns>
    public DataSet Delete(string tableName, string[] cols, string[] colsvalues)
    {
        string delete = "delete from " + tableName + " where " + cols[0] + " = " + colsvalues[0];
        for (int i = 1; i < colsvalues.Length; i++)
        {
            delete += " or " + cols[i] + " = " + colsvalues[i];
        }
        Debug.Log(delete);
        return QuerySet(delete);
    }
    /// <summary>
    /// 执行SQL语句
    /// </summary>
    /// <param name="sqlString">sql语句</param>
    /// <returns></returns>
    private DataSet QuerySet(string sqlString)
    {
        if (mySqlConnection.State == ConnectionState.Open)
        {
            DataSet ds = new DataSet();
            try
            {
                MySqlDataAdapter mySqlAdapter = new MySqlDataAdapter(sqlString, mySqlConnection);
                mySqlAdapter.Fill(ds);
            }
            catch (Exception e)
            {
                Debug.Log("SQL:" + sqlString + "/n" + e.Message.ToString());
            }
            finally
            {
            }
            return ds;
        }
        return null;
    }
}

